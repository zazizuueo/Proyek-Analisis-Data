# -*- coding: utf-8 -*-
"""dashboard.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XrpflZeNJG0FgCrzyf3kQxLnih8lhcPL
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from babel.numbers import format_currency

st.set_page_config(layout="wide")
sns.set(style="whitegrid")

@st.cache_data

def load_data():
    df = pd.read_csv("/content/all_data.csv", parse_dates=["order_purchase_timestamp", "order_approved_at", "order_delivered_customer_date", "order_estimated_delivery_date"])
    df["delivery_days"] = (df["order_delivered_customer_date"] - df["order_purchase_timestamp"]).dt.total_seconds() / (60 * 60 * 24)
    df["delivery_days"] = df["delivery_days"].astype(float)
    df["approval_time"] = (df["order_approved_at"] - df["order_purchase_timestamp"]).dt.total_seconds() / 3600
    df["year"] = df["order_purchase_timestamp"].dt.year
    df["month"] = df["order_purchase_timestamp"].dt.month
    df["semester"] = df["month"].apply(lambda x: 1 if x <= 6 else 2)
    df["year_semester"] = df["year"].astype(str) + "-S" + df["semester"].astype(str)
    df["quarter"] = df["order_purchase_timestamp"].dt.to_period("Q")
    return df

# Load
all_df = load_data()
st.title("E-Commerce Analysis Dashboard")

# Pertanyaan 1
st.header("1. Tren Waktu Pengiriman per Kuartal (2017-2018)")
delivery_trend = all_df[(all_df["year"] >= 2017) & (all_df["year"] <= 2018)]
delivery_by_quarter = delivery_trend.groupby("quarter")["delivery_days"].mean().reset_index()
delivery_by_quarter["quarter"] = delivery_by_quarter["quarter"].astype(str)
fig1, ax1 = plt.subplots(figsize=(10, 5))
sns.lineplot(data=delivery_by_quarter, x="quarter", y="delivery_days", marker="o", ax=ax1)
ax1.set_title("Rata-rata Waktu Pengiriman per Kuartal")
ax1.set_ylabel("Hari")
ax1.set_xlabel("Kuartal")
st.pyplot(fig1)

# Pertanyaan 2
st.header("2. Kota/Provinsi dengan Keterlambatan Pengiriman Terbanyak (2018)")
delay_2018 = all_df[(all_df["year"] == 2018)]
delay_2018 = delay_2018[delay_2018["order_delivered_customer_date"] > delay_2018["order_estimated_delivery_date"]]
delay_by_state = delay_2018["customer_state"].value_counts().head(10)
fig2, ax2 = plt.subplots()
sns.barplot(x=delay_by_state.values, y=delay_by_state.index, ax=ax2, palette="Reds")
ax2.set_title("Top 10 Provinsi dengan Keterlambatan Pengiriman")
ax2.set_xlabel("Jumlah Keterlambatan")
st.pyplot(fig2)

# Pertanyaan 3
st.header("3. Kontribusi Pendapatan per Kategori Produk Tiap Semester")
revenue_by_cat = all_df.groupby(["year_semester", "product_category_name_english"]).agg({"price": "sum"}).reset_index()
fig3, ax3 = plt.subplots(figsize=(12, 6))
sns.barplot(data=revenue_by_cat, x="year_semester", y="price", hue="product_category_name_english", ax=ax3)
ax3.set_title("Kontribusi Pendapatan per Kategori Produk")
ax3.set_ylabel("Total Pendapatan")
ax3.legend(loc='center left', bbox_to_anchor=(1, 0.5), title="Kategori")
st.pyplot(fig3)

# Pertanyaan 4
st.header("4. Waktu Persetujuan Pesanan Selama Peak Season vs Non-Peak")
all_df["peak"] = all_df["month"].apply(lambda x: "Peak" if x in [11, 12] else "Non-Peak")
selected_cats = all_df["product_category_name_english"].value_counts().head(5).index.tolist()
filtered = all_df[all_df["product_category_name_english"].isin(selected_cats)]
fig4, ax4 = plt.subplots(figsize=(10, 6))
sns.boxplot(data=filtered, x="product_category_name_english", y="approval_time", hue="peak", ax=ax4)
ax4.set_title("Waktu Persetujuan Pesanan antara Peak dan Non-Peak")
ax4.set_ylabel("Waktu Persetujuan (jam)")
st.pyplot(fig4)

# Pertanyaan 5
st.header("5. Top 10 Seller berdasarkan Penjualan Tahun 2018 dan Tren Bulanannya")
top_seller_2018 = all_df[all_df["year"] == 2018].groupby("seller_id")["price"].sum().nlargest(10).reset_index()
top_sellers = top_seller_2018["seller_id"].tolist()
monthly_trend = all_df[(all_df["seller_id"].isin(top_sellers)) & (all_df["year"] == 2018)]
monthly_trend = monthly_trend.groupby(["seller_id", "month"])["price"].sum().reset_index()
fig5, ax5 = plt.subplots(figsize=(12, 6))
sns.lineplot(data=monthly_trend, x="month", y="price", hue="seller_id", marker="o", ax=ax5)
ax5.set_title("Tren Penjualan Bulanan 10 Seller Teratas di 2018")
ax5.set_xlabel("Bulan")
ax5.set_ylabel("Total Penjualan")
st.pyplot(fig5)

plt.show()

st.caption("Sumber Data: all_data.csv | Disusun berdasarkan hasil analisis pribadi")